ARG PYTHON_BASE=3.13-slim-bookworm
# build stage
FROM python:$PYTHON_BASE AS builder

# install uv
RUN apt-get update && apt-get install -y --no-install-recommends curl ca-certificates
ADD https://astral.sh/uv/install.sh /uv-installer.sh
RUN sh /uv-installer.sh && rm /uv-installer.sh

# Ensure the installed binary is on the `PATH`
ENV PATH="/root/.local/bin/:$PATH"

# set work directory
WORKDIR /backend/src
WORKDIR /backend/src
# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
COPY ../pyproject.toml ../uv.lock ../README.md ../.dockerignore ../entrypoint.sh ../LICENSE ../
COPY ../src /backend/src
RUN cd ..
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --locked --no-install-project --no-editable
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked --no-editable --no-default-groups

# run dev stage
FROM builder AS dev

# retrieve packages from build stage
COPY --from=builder --chown=backend:backend /backend/.venv /backend/.venv

# install dev dependencies
RUN cd ..
COPY ../docs /backend/docs
COPY ../mkdocs.yml /backend/mkdocs.yml
RUN uv sync --all-groups
ENTRYPOINT ["/backend/entrypoint.sh" ]


# run prod stage
FROM builder AS prod

COPY --from=builder --chown=backend:backend /backend/.venv /backend/.venv

ENTRYPOINT ["/backend/entrypoint.sh" ]
