# Generated by Django 4.1 on 2023-01-12 05:01

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('workplace', '0001_initial'),
        ('employee', '0001_initial'),
        ('software', '0001_initial'),
        ('catalog', '0006_remove_cpu_manufacturer_remove_dcpower_manufacturer_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='cpu',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Введите название модели', max_length=50, verbose_name='Модель')),
                ('serial', models.CharField(blank=True, help_text='Введите серийный номер', max_length=50, null=True, verbose_name='Серийный номер')),
                ('serialImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='cpu/serial/', verbose_name='Фото серийного номера')),
                ('invent', models.CharField(blank=True, help_text='Введите инвентарный номер', max_length=50, null=True, verbose_name='Инвентарный номер')),
                ('inventImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='cpu/invent/', verbose_name='Фото инвентарного номера')),
                ('socket', models.CharField(blank=True, help_text='Укажите сокет', max_length=50, null=True, verbose_name='Сокет')),
                ('frequency', models.CharField(blank=True, help_text='Укажите частоту', max_length=50, null=True, verbose_name='Частота')),
                ('l1', models.CharField(blank=True, help_text='Укажите размер L1 cache', max_length=50, null=True, verbose_name='L1 cache')),
                ('l2', models.CharField(blank=True, help_text='Укажите размер L2 cache', max_length=50, null=True, verbose_name='L2 cache')),
                ('l3', models.CharField(blank=True, help_text='Укажите размер L3 cache', max_length=50, null=True, verbose_name='L3 cache')),
                ('core', models.CharField(blank=True, help_text='Укажите количество ядер', max_length=50, null=True, verbose_name='Количество ядер')),
                ('thread', models.CharField(blank=True, help_text='Укажите количество потоков', max_length=50, null=True, verbose_name='Количество потоков')),
                ('memory', models.CharField(blank=True, help_text='Укажите тип RAM', max_length=50, null=True, verbose_name='Тип RAM')),
                ('memoryCapacity', models.CharField(blank=True, help_text='Укажите поддерживаемый обЪем памяти', max_length=50, null=True, verbose_name='Поддерживаемый обЪем памяти')),
                ('channelsCapacity', models.CharField(blank=True, help_text='Укажите количество каналов памяти', max_length=50, null=True, verbose_name='Количество каналов памяти')),
                ('tdp', models.CharField(blank=True, help_text='Укажите TDP', max_length=50, null=True, verbose_name='TDP')),
                ('supply', models.CharField(blank=True, help_text='Укажите тип питания', max_length=50, null=True, verbose_name='Питание')),
                ('score', models.IntegerField(blank=True, help_text='Введите количество на складе', null=True, verbose_name='Остаток на складе')),
                ('manufacturer', models.ForeignKey(blank=True, help_text='Укажите производителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'CPU',
                'verbose_name_plural': 'CPUs',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='dcpower',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Введите название модели', max_length=50, verbose_name='Модель')),
                ('serial', models.CharField(blank=True, help_text='Введите серийный номер', max_length=50, null=True, verbose_name='Серийный номер')),
                ('serialImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/serial/', verbose_name='Фото серийного номера')),
                ('invent', models.CharField(blank=True, help_text='Введите инвентарный номер', max_length=50, null=True, verbose_name='Инвентарный номер')),
                ('inventImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/invent/', verbose_name='Фото инвентарного номера')),
                ('power', models.CharField(blank=True, help_text='Укажите мощность', max_length=50, null=True, verbose_name='Мощность')),
                ('motherboard', models.CharField(blank=True, help_text='Укажите питание материнской платы', max_length=50, null=True, verbose_name='Питание материнской платы')),
                ('cpu', models.CharField(blank=True, help_text='Укажите питание CPU', max_length=50, null=True, verbose_name='Питание CPU')),
                ('gpu', models.CharField(blank=True, help_text='Укажите питание GPU', max_length=50, null=True, verbose_name='Питание GPU')),
                ('sata', models.CharField(blank=True, help_text='Укажите питание SATA', max_length=50, null=True, verbose_name='Питание SATA')),
                ('molex', models.CharField(blank=True, help_text='Укажите питание molex', max_length=50, null=True, verbose_name='Питание molex')),
                ('score', models.IntegerField(blank=True, help_text='Введите количество на складе', null=True, verbose_name='Остаток на складе')),
                ('manufacturer', models.ForeignKey(blank=True, help_text='Укажите производителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'Блок питания',
                'verbose_name_plural': 'Блоки питания',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='gpu',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Введите название модели', max_length=50, verbose_name='Модель')),
                ('type', models.CharField(choices=[('Интегрированная', 'Интегрированная'), ('Дискретная', 'Дискретная')], help_text='Укажите тип подключения', max_length=50, verbose_name='Тип подключения')),
                ('serial', models.CharField(blank=True, help_text='Введите серийный номер', max_length=50, null=True, verbose_name='Серийный номер')),
                ('serialImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/serial/', verbose_name='Фото серийного номера')),
                ('invent', models.CharField(blank=True, help_text='Введите инвентарный номер', max_length=50, null=True, verbose_name='Инвентарный номер')),
                ('inventImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/invent/', verbose_name='Фото инвентарного номера')),
                ('gram', models.CharField(blank=True, help_text='Укажите объем памяти', max_length=50, null=True, verbose_name='Объем памяти')),
                ('gramType', models.CharField(blank=True, help_text='Укажите тип памяти', max_length=50, null=True, verbose_name='Тип памяти')),
                ('pcie', models.CharField(blank=True, help_text='Укажите версию PCI Express', max_length=50, null=True, verbose_name='Версия PCI Express')),
                ('supply', models.CharField(blank=True, help_text='Укажите тип питания', max_length=50, null=True, verbose_name='Питание')),
                ('score', models.IntegerField(blank=True, help_text='Введите количество на складе', null=True, verbose_name='Остаток на складе')),
                ('manufacturer', models.ForeignKey(blank=True, help_text='Укажите производителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'GPU',
                'verbose_name_plural': 'GPUs',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='hdd',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Введите название модели', max_length=50, verbose_name='Модель')),
                ('serial', models.CharField(blank=True, help_text='Введите серийный номер', max_length=50, null=True, verbose_name='Серийный номер')),
                ('serialImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/serial/', verbose_name='Фото серийного номера')),
                ('invent', models.CharField(blank=True, help_text='Введите инвентарный номер', max_length=50, null=True, verbose_name='Инвентарный номер')),
                ('inventImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/invent/', verbose_name='Фото инвентарного номера')),
                ('capacity', models.CharField(blank=True, help_text='Укажите объем памяти', max_length=50, null=True, verbose_name='Объем памяти')),
                ('plug', models.CharField(blank=True, help_text='Укажите тип подключения', max_length=50, null=True, verbose_name='Тип подключения')),
                ('speedRead', models.CharField(blank=True, help_text='Укажите скорость чтения', max_length=50, null=True, verbose_name='Скорость чтения')),
                ('speadWrite', models.CharField(blank=True, help_text='Укажите скорость записи', max_length=50, null=True, verbose_name='Скорость записи')),
                ('rpm', models.CharField(blank=True, help_text='Укажите RPM', max_length=50, null=True, verbose_name='RPM')),
                ('score', models.IntegerField(blank=True, help_text='Введите количество на складе', null=True, verbose_name='Остаток на складе')),
                ('manufacturer', models.ForeignKey(blank=True, help_text='Укажите производителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'HDD',
                'verbose_name_plural': 'HDDs',
            },
        ),
        migrations.CreateModel(
            name='keyBoard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Введите название модели', max_length=50, verbose_name='Модель')),
                ('serial', models.CharField(blank=True, help_text='Введите серийный номер', max_length=50, null=True, verbose_name='Серийный номер')),
                ('serialImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/serial/', verbose_name='Фото серийного номера')),
                ('invent', models.CharField(blank=True, help_text='Введите инвентарный номер', max_length=50, null=True, verbose_name='Инвентарный номер')),
                ('inventImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/invent/', verbose_name='Фото инвентарного номера')),
                ('score', models.IntegerField(blank=True, help_text='Введите количество на складе', null=True, verbose_name='Остаток на складе')),
                ('manufacturer', models.ForeignKey(blank=True, help_text='Укажите производителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'Клавиатура',
                'verbose_name_plural': 'Клавиатуры',
            },
        ),
        migrations.CreateModel(
            name='monitor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Введите название модели', max_length=50, verbose_name='Модель')),
                ('serial', models.CharField(blank=True, help_text='Введите серийный номер', max_length=50, null=True, verbose_name='Серийный номер')),
                ('serialImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='monitor/serial/', verbose_name='Фото серийного номера')),
                ('invent', models.CharField(blank=True, help_text='Введите инвентарный номер', max_length=50, null=True, verbose_name='Инвентарный номер')),
                ('inventImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='monitor/invent/', verbose_name='Фото инвентарного номера')),
                ('resolution', models.CharField(blank=True, help_text='Укажите разрешение', max_length=50, null=True, verbose_name='Разрешение')),
                ('frequency', models.CharField(blank=True, help_text='Укажите частоту', max_length=50, null=True, verbose_name='Частота')),
                ('typeDisplay', models.CharField(blank=True, help_text='Укажите тип матрицы', max_length=50, null=True, verbose_name='Тип матрицы')),
                ('dpi', models.CharField(blank=True, help_text='Укажите плотность пикселей', max_length=50, null=True, verbose_name='Плотность пикселей')),
                ('usbPort', models.CharField(blank=True, help_text='Укажите количество USB', max_length=50, null=True, verbose_name='Количество USB')),
                ('hdmi', models.CharField(blank=True, help_text='Укажите количество HDMI', max_length=50, null=True, verbose_name='Количество HDMI')),
                ('vga', models.CharField(blank=True, help_text='Укажите количество VGA', max_length=50, null=True, verbose_name='Количество VGA')),
                ('dvi', models.CharField(blank=True, help_text='Укажите количество DVI', max_length=50, null=True, verbose_name='Количество DVI')),
                ('displayPort', models.CharField(blank=True, help_text='Укажите количество DisplayPort', max_length=50, null=True, verbose_name='Количество DisplayPort')),
                ('manufacturer', models.ForeignKey(blank=True, help_text='Укажите производителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'Монитор',
                'verbose_name_plural': 'Мониторы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='motherboard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Введите Название модели', max_length=50, verbose_name='Название модели')),
                ('serial', models.CharField(blank=True, help_text='Введите серийный номер', max_length=50, null=True, verbose_name='Серийный номер')),
                ('serialImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='motherboard/serial/', verbose_name='Фото серийного номера')),
                ('invent', models.CharField(blank=True, help_text='Введите инвентарный номер', max_length=50, null=True, verbose_name='Инвентарный номер')),
                ('inventImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='motherboard/invent/', verbose_name='Фото инвентарного номера')),
                ('cpuSoket', models.TextField(blank=True, help_text='Описание сокета', max_length=200, null=True, verbose_name='CPU Soket')),
                ('ramSlot', models.TextField(blank=True, help_text='Описание RAM', max_length=200, null=True, verbose_name='RAM Slot')),
                ('usb_2', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='USB 2.0')),
                ('usb_3', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='USB 3.0')),
                ('usb_3_1', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='USB 3.1')),
                ('usb_3_2', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='USB 3.2')),
                ('usb_4_0', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='USB 4.0')),
                ('comPort', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='COM Port')),
                ('pcie_x1', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='PCIExpress X1')),
                ('pcie_x16', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='PCI Express X16')),
                ('pci', models.TextField(blank=True, help_text='Введите количество и тип', max_length=200, null=True, verbose_name='PCI')),
                ('sata', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='SATA')),
                ('m2', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='M2')),
                ('vga', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='VGA')),
                ('hdmi', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='HDMI')),
                ('dvi', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='DVI')),
                ('dispayPort', models.TextField(blank=True, help_text='Введите количество', max_length=200, null=True, verbose_name='DisplayPort')),
                ('powerSupply', models.TextField(blank=True, help_text='Введите конфигурацию', max_length=200, null=True, verbose_name='Питание материнской платы')),
                ('powerSupplyCPU', models.TextField(blank=True, help_text='Введите конфигурацию', max_length=200, null=True, verbose_name='Питание CPU')),
                ('manufacturer', models.ForeignKey(blank=True, help_text='Укажите производителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'Материнская плата',
                'verbose_name_plural': 'Материнские платы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='mouse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Введите название модели', max_length=50, verbose_name='Модель')),
                ('serial', models.CharField(blank=True, help_text='Введите серийный номер', max_length=50, null=True, verbose_name='Серийный номер')),
                ('serialImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/serial/', verbose_name='Фото серийного номера')),
                ('invent', models.CharField(blank=True, help_text='Введите инвентарный номер', max_length=50, null=True, verbose_name='Инвентарный номер')),
                ('inventImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/invent/', verbose_name='Фото инвентарного номера')),
                ('score', models.IntegerField(blank=True, help_text='Введите количество на складе', null=True, verbose_name='Остаток на складе')),
                ('manufacturer', models.ForeignKey(blank=True, help_text='Укажите производителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'Мышь',
                'verbose_name_plural': 'Мышки',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ram',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Введите название модели', max_length=50, verbose_name='Модель')),
                ('type', models.CharField(help_text='Введите тип памяти', max_length=50, verbose_name='Тип памяти')),
                ('serial', models.CharField(blank=True, help_text='Введите серийный номер', max_length=50, null=True, verbose_name='Серийный номер')),
                ('serialImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/serial/', verbose_name='Фото серийного номера')),
                ('invent', models.CharField(blank=True, help_text='Введите инвентарный номер', max_length=50, null=True, verbose_name='Инвентарный номер')),
                ('inventImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/invent/', verbose_name='Фото инвентарного номера')),
                ('ramCapacity', models.CharField(blank=True, help_text='Укажите объем памяти', max_length=50, null=True, verbose_name='Объем памяти')),
                ('rang', models.CharField(blank=True, help_text='Укажите ранг памяти', max_length=50, null=True, verbose_name='Ранг памяти')),
                ('score', models.IntegerField(blank=True, help_text='Введите количество на складе', null=True, verbose_name='Остаток на складе')),
                ('manufacturer', models.ForeignKey(blank=True, help_text='Укажите производителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'RAM',
                'verbose_name_plural': 'RAMs',
            },
        ),
        migrations.CreateModel(
            name='ssd',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Введите название модели', max_length=50, verbose_name='Модель')),
                ('type', models.CharField(help_text='Введите тип памяти', max_length=50, verbose_name='Тип памяти')),
                ('serial', models.CharField(blank=True, help_text='Введите серийный номер', max_length=50, null=True, verbose_name='Серийный номер')),
                ('serialImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/serial/', verbose_name='Фото серийного номера')),
                ('invent', models.CharField(blank=True, help_text='Введите инвентарный номер', max_length=50, null=True, verbose_name='Инвентарный номер')),
                ('inventImg', models.ImageField(blank=True, help_text='прикрепите файл', null=True, upload_to='gpu/invent/', verbose_name='Фото инвентарного номера')),
                ('capacity', models.CharField(blank=True, help_text='Укажите объем памяти', max_length=50, null=True, verbose_name='Объем памяти')),
                ('plug', models.CharField(blank=True, help_text='Укажите тип подключения', max_length=50, null=True, verbose_name='Тип подключения')),
                ('speedRead', models.CharField(blank=True, help_text='Укажите скорость чтения', max_length=50, null=True, verbose_name='Скорость чтения')),
                ('speadWrite', models.CharField(blank=True, help_text='Укажите скорость записи', max_length=50, null=True, verbose_name='Скорость записи')),
                ('resourse', models.CharField(blank=True, help_text='Укажите ресурс', max_length=50, null=True, verbose_name='Ресурс')),
                ('score', models.IntegerField(blank=True, help_text='Введите количество на складе', null=True, verbose_name='Остаток на складе')),
                ('manufacturer', models.ForeignKey(blank=True, help_text='Укажите производителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.manufacturer', verbose_name='Производитель')),
            ],
            options={
                'verbose_name': 'SSD',
                'verbose_name_plural': 'SSDs',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='workstation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, help_text='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Введите номер станции', max_length=50, verbose_name='Рабочая станция')),
                ('modelComputer', models.CharField(blank=True, help_text='Введите название модели', max_length=200, null=True, verbose_name='Модель')),
                ('serial', models.CharField(blank=True, help_text='Введите серийный номер', max_length=50, null=True, verbose_name='Серийный номер')),
                ('serialImg', models.ImageField(blank=True, help_text='Прикрепите файл', null=True, upload_to='workstation/serial/', verbose_name='Фото серийного номера')),
                ('invent', models.CharField(blank=True, help_text='Введите инвентаризационный номер', max_length=50, null=True, verbose_name='Инвентарный номер')),
                ('inventImg', models.ImageField(blank=True, help_text='Прикрепите файл', null=True, upload_to='workstation/invent/', verbose_name='Фото инвентарного номера')),
                ('cpu', models.ForeignKey(blank=True, help_text='Укажите CPU', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workstation.cpu', verbose_name='CPU')),
                ('dcpower', models.ForeignKey(blank=True, help_text='Укажите блок питания', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workstation.dcpower', verbose_name='Блок питания')),
                ('employee', models.ForeignKey(blank=True, help_text='Укажите сотрудника', null=True, on_delete=django.db.models.deletion.SET_NULL, to='employee.employee', verbose_name='Сотрудник')),
                ('gpu', models.ForeignKey(blank=True, help_text='Укажите GPU', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workstation.gpu', verbose_name='GPU')),
                ('hdd', models.ForeignKey(blank=True, help_text='Укажите HDD', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workstation.hdd', verbose_name='HDD')),
                ('keyBoard', models.ForeignKey(blank=True, help_text='Укажите клавиатуру', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workstation.keyboard', verbose_name='Клавиатура')),
                ('manufacturer', models.ForeignKey(blank=True, help_text='Укажите производителя', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.manufacturer', verbose_name='Производитель')),
                ('monitor', models.ForeignKey(blank=True, help_text='Укажите монитор', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workstation.monitor', verbose_name='Монитор')),
                ('motherboard', models.ForeignKey(blank=True, help_text='Укажите материнскую плату', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workstation.motherboard', verbose_name='Материнская плата')),
                ('mouse', models.ForeignKey(blank=True, help_text='Укажите мышь', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workstation.mouse', verbose_name='Мышь')),
                ('os', models.ForeignKey(blank=True, help_text='Укажите операционную систему', null=True, on_delete=django.db.models.deletion.SET_NULL, to='software.os', verbose_name='Операционная система')),
                ('ram', models.ForeignKey(blank=True, help_text='Укажите RAM', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workstation.ram', verbose_name='RAM')),
                ('software', models.ForeignKey(blank=True, help_text='Укажите програмное обеспечение', null=True, on_delete=django.db.models.deletion.SET_NULL, to='software.software', verbose_name='Програмное обеспечение')),
                ('ssd', models.ForeignKey(blank=True, help_text='Укажите SSD', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workstation.ssd', verbose_name='SSD')),
                ('ups', models.ForeignKey(blank=True, help_text='Укажите блок бесперебойного питания', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.ups', verbose_name='Блок бесперебойного питания')),
                ('workplace', models.ForeignKey(blank=True, help_text='Укажите рабочее место', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workplace.workplace', verbose_name='Рабочее место')),
            ],
            options={
                'verbose_name': 'Рабочая станция',
                'verbose_name_plural': 'Рабочие станции',
                'ordering': ['employee', 'name', 'workplace'],
            },
        ),
    ]
